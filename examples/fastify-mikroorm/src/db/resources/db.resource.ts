/**
 * Generated by runner-dev new resource db
 * - Namespace: db
 * - File: src/db/resources/db.resource.ts
 */
import { r, globals } from "@bluelibs/runner";
import { Migrator } from "@mikro-orm/migrations";
import { MikroORM } from "@mikro-orm/core";
import { entitiesResourceMap, entities } from "./entities/index";
import { ormConfig } from "./orm.config";
import { userEntity } from "./entities/user.entity";

export interface DbConfig {
  // Add your config shape here
}

export const db = r
  .resource<DbConfig>("app.db.resources.db")
  .meta({
    title: "Database Connection",
    description: "MikroORM database connection with entity management and migration support",
  })
  .register([ormConfig, entities])
  .dependencies({ entities, ormConfig, logger: globals.resources.logger })
  .init(async (_config, { entities, ormConfig, logger }) => {
    const orm = await MikroORM.init(ormConfig);
    logger.info("Database connected");

    return {
      orm,
      em: () => orm.em.fork(),
      entities,
    };
  })
  .dispose(async (value) => {
    // Ensure ORM connections are closed so tests/process exit cleanly
    await value.orm.close(true);
  })
  .build();
