/**
 * Generated by runner-dev new resource fastify
 * - Namespace: http
 * - File: src/http/resources/fastify.resource.ts
 */
import { globals, resource, Errors } from "@bluelibs/runner";
import Fastify from "fastify";
import { HTTPError } from "../http-error";

export const fastify = resource({
  id: "app.http.resources.fastify",
  meta: {
    title: "Fastify HTTP Server",
    description: "High-performance HTTP server instance for handling web requests and API endpoints",
  },
  init: async () => {
    const fastify = Fastify();

    fastify.setErrorHandler((err, _req, reply) => {
      // HTTPError thrown from tasks
      if (err instanceof HTTPError) {
        return reply.status(err.statusCode).send({ error: err.message, details: err.details });
      }
      // Runner validation errors
      if (err instanceof (Errors as any).ValidationError || err?.name === "ValidationError") {
        return reply.status(400).send({ error: err.message });
      }
      // Errors with statusCode
      const status = (err as any)?.statusCode;
      if (typeof status === "number") {
        return reply.status(status).send({ error: err.message });
      }
      // Fallback
      reply.status(500).send({ error: "Internal Server Error" });
    });

    return fastify;
  },
  dispose: async (fastify) => fastify.close(),
});
